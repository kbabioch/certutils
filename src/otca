#! /bin/bash

# otca
#
# Copyright (c) 2015 Karol Babioch <karol@babioch.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Version string
VERSION="0.1"

# Various exit codes used throughout the program
EXIT_INVALID_OPTIONS=1

# Name of the server if not set explicitly
SERVERNAME=$(hostname)

# Name of the client, empty by default
CLIENTNAME=""

# Output a prefixed error message and exit with given code
# $1: Exit code
# $2: Error message
error()
{

    echo "ERROR: $2"

    exit $1

}

# Output usage help
help()
{

    cat << EOF

    Usage: $0 [OPTIONS...] CLIENTNAME

    OPTIONS:

      -s, --servername=         Set name of the server explicetely, rather than using the hostname of the machine

      -h, --help                Show this usage help
          --version             Show version information

    CLIENTNAME: Name of the client that the OTCA should be set up for

EOF

}

# Output version information
version()
{

    cat << EOF

    Version: $VERSION

    Copyright (c) 2015 Karol Babioch <karol@babioch.de>

    This program comes with ABSOLUTELY NO WARRANTY; This is free software, and
    you are welcome to redistribute it under certain conditions;

EOF

}

# Output information about OTCA configuration to user
info()
{


    cat << EOF

    One-Time CA for

        Server:     $SERVERNAME
        Client:     $CLIENTNAME

EOF

}

# Main entry point
#
# This processes the given command line arguments one by one
#
# $@: Command line arguments
main()
{

    # Parse options provided as command line arguments
    for i in "$@"
    do

        case "$i" in

            # Set name of server (short)
            -s)
                SERVERNAME="$2"
                shift 2
                ;;

            # Set name of server (long)
            --servername=*)
                SERVERNAME="${i#*=}"
                shift
                ;;

            # Usage help
            -h|--help)
                help
                exit
                ;;

            # Version information
            --version)
                version
                exit

        esac

    done

    # Check for correct number of arguments
    if [[ "$#" != 1 ]]; then

        error $EXIT_INVALID_OPTIONS "Wrong number of arguments!"

    fi

    # Check for empty servername
    if [[ -z "$SERVERNAME" ]]; then

        error $EXIT_INVALID_OPTIONS "Servername must not be empty!"

    fi

    # Check for empty clientname
    if [[ -z "$1" ]]; then

        error $EXIT_INVALID_OPTIONS "Clientname must not be empty!"

    fi

    # Clientname was provided as command line argument
    CLIENTNAME="$1"

    info

}

# Invoke main()
main "$@"

